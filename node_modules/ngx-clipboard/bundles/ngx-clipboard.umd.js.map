{"version":3,"file":"ngx-clipboard.umd.js","sources":["../../../projects/ngx-clipboard/src/lib/ngx-clipboard.service.ts","../../../projects/ngx-clipboard/src/lib/ngx-clipboard.directive.ts","../../../projects/ngx-clipboard/src/lib/ngx-clipboard-if-supported.directive.ts","../../../projects/ngx-clipboard/src/lib/ngx-clipboard.module.ts","../../../projects/ngx-clipboard/src/public_api.ts","../../../projects/ngx-clipboard/src/ngx-clipboard.ts"],"names":["Subject","Injectable","Inject","DOCUMENT","Optional","WINDOW","EventEmitter","Directive","Input","Output","HostListener","ViewContainerRef","TemplateRef","NgModule","CommonModule"],"mappings":"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","sourcesContent":["import { DOCUMENT } from '@angular/common';\r\nimport { Inject, Injectable, Optional } from '@angular/core';\r\nimport { WINDOW } from 'ngx-window-token';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\nimport { ClipboardParams, IClipboardResponse } from './interface';\r\n\r\n/**\r\n * The following code is heavily copied from https://github.com/zenorocha/clipboard.js\r\n */\r\n@Injectable({ providedIn: 'root' })\r\nexport class ClipboardService {\r\n    private copySubject = new Subject<IClipboardResponse>();\r\n    public copyResponse$: Observable<IClipboardResponse> = this.copySubject.asObservable();\r\n    private tempTextArea: HTMLTextAreaElement | undefined;\r\n    private config: ClipboardParams = {};\r\n\r\n    constructor(@Inject(DOCUMENT) public document: any, @Optional() @Inject(WINDOW) private window: any) {}\r\n\r\n    public configure(config: ClipboardParams) {\r\n        this.config = config;\r\n    }\r\n\r\n    public copy(content: string): void {\r\n        if (!this.isSupported || !content) {\r\n            return this.pushCopyResponse({ isSuccess: false, content });\r\n        }\r\n        const copyResult = this.copyFromContent(content);\r\n        if (copyResult) {\r\n            return this.pushCopyResponse({ content, isSuccess: copyResult });\r\n        }\r\n        return this.pushCopyResponse({ isSuccess: false, content });\r\n    }\r\n\r\n    public get isSupported(): boolean {\r\n        return !!this.document.queryCommandSupported && !!this.document.queryCommandSupported('copy') && !!this.window;\r\n    }\r\n\r\n    public isTargetValid(element: HTMLInputElement | HTMLTextAreaElement): boolean {\r\n        if (element instanceof HTMLInputElement || element instanceof HTMLTextAreaElement) {\r\n            if (element.hasAttribute('disabled')) {\r\n                throw new Error('Invalid \"target\" attribute. Please use \"readonly\" instead of \"disabled\" attribute');\r\n            }\r\n            return true;\r\n        }\r\n        throw new Error('Target should be input or textarea');\r\n    }\r\n\r\n    /**\r\n     * Attempts to copy from an input `targetElm`\r\n     */\r\n    public copyFromInputElement(targetElm: HTMLInputElement | HTMLTextAreaElement, isFocus = true): boolean {\r\n        try {\r\n            this.selectTarget(targetElm);\r\n            const re = this.copyText();\r\n            this.clearSelection(isFocus ? targetElm : undefined, this.window);\r\n            return re && this.isCopySuccessInIE11();\r\n        } catch (error) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This is a hack for IE11 to return `true` even if copy fails.\r\n     */\r\n    public isCopySuccessInIE11(): boolean {\r\n        const clipboardData = this.window['clipboardData'];\r\n        if (clipboardData && clipboardData.getData) {\r\n            if (!clipboardData.getData('Text')) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Creates a fake textarea element, sets its value from `text` property,\r\n     * and makes a selection on it.\r\n     */\r\n    public copyFromContent(content: string, container: HTMLElement = this.document.body): boolean {\r\n        // check if the temp textarea still belongs to the current container.\r\n        // In case we have multiple places using ngx-clipboard, one is in a modal using container but the other one is not.\r\n        if (this.tempTextArea && !container.contains(this.tempTextArea)) {\r\n            this.destroy(this.tempTextArea.parentElement || undefined);\r\n        }\r\n\r\n        if (!this.tempTextArea) {\r\n            this.tempTextArea = this.createTempTextArea(this.document, this.window);\r\n            try {\r\n                container.appendChild(this.tempTextArea);\r\n            } catch (error) {\r\n                throw new Error('Container should be a Dom element');\r\n            }\r\n        }\r\n        this.tempTextArea.value = content;\r\n\r\n        const toReturn = this.copyFromInputElement(this.tempTextArea, false);\r\n        if (this.config.cleanUpAfterCopy) {\r\n            this.destroy(this.tempTextArea.parentElement || undefined);\r\n        }\r\n        return toReturn;\r\n    }\r\n\r\n    /**\r\n     * Remove temporary textarea if any exists.\r\n     */\r\n    public destroy(container: HTMLElement = this.document.body): void {\r\n        if (this.tempTextArea) {\r\n            container.removeChild(this.tempTextArea);\r\n            // removeChild doesn't remove the reference from memory\r\n            this.tempTextArea = undefined;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Select the target html input element.\r\n     */\r\n    private selectTarget(inputElement: HTMLInputElement | HTMLTextAreaElement): number | undefined {\r\n        inputElement.select();\r\n        inputElement.setSelectionRange(0, inputElement.value.length);\r\n        return inputElement.value.length;\r\n    }\r\n\r\n    private copyText(): boolean {\r\n        return this.document.execCommand('copy');\r\n    }\r\n\r\n    /**\r\n     * Moves focus away from `target` and back to the trigger, removes current selection.\r\n     */\r\n    private clearSelection(inputElement: HTMLInputElement | HTMLTextAreaElement | undefined, window: Window): void {\r\n        inputElement && inputElement.focus();\r\n        window.getSelection()?.removeAllRanges();\r\n    }\r\n\r\n    /**\r\n     * Creates a fake textarea for copy command.\r\n     */\r\n    private createTempTextArea(doc: Document, window: Window): HTMLTextAreaElement {\r\n        const isRTL = doc.documentElement.getAttribute('dir') === 'rtl';\r\n        let ta: HTMLTextAreaElement;\r\n        ta = doc.createElement('textarea');\r\n        // Prevent zooming on iOS\r\n        ta.style.fontSize = '12pt';\r\n        // Reset box model\r\n        ta.style.border = '0';\r\n        ta.style.padding = '0';\r\n        ta.style.margin = '0';\r\n        // Move element out of screen horizontally\r\n        ta.style.position = 'absolute';\r\n        ta.style[isRTL ? 'right' : 'left'] = '-9999px';\r\n        // Move element to the same position vertically\r\n        const yPosition = window.pageYOffset || doc.documentElement.scrollTop;\r\n        ta.style.top = yPosition + 'px';\r\n        ta.setAttribute('readonly', '');\r\n        return ta;\r\n    }\r\n\r\n    /**\r\n     * Pushes copy operation response to copySubject, to provide global access\r\n     * to the response.\r\n     */\r\n    public pushCopyResponse(response: IClipboardResponse): void {\r\n        this.copySubject.next(response);\r\n    }\r\n\r\n    /**\r\n     * @deprecated use pushCopyResponse instead.\r\n     */\r\n    public pushCopyReponse(response: IClipboardResponse): void {\r\n        this.pushCopyResponse(response);\r\n    }\r\n}\r\n","import { Directive, EventEmitter, HostListener, Input, OnDestroy, OnInit, Output } from '@angular/core';\r\n\r\nimport { IClipboardResponse } from './interface';\r\nimport { ClipboardService } from './ngx-clipboard.service';\r\n\r\n@Directive({\r\n    selector: '[ngxClipboard]'\r\n})\r\nexport class ClipboardDirective implements OnInit, OnDestroy {\r\n    // https://github.com/maxisam/ngx-clipboard/issues/239#issuecomment-623330624\r\n    // tslint:disable-next-line:no-input-rename\r\n    @Input('ngxClipboard')\r\n    public targetElm: HTMLInputElement | HTMLTextAreaElement | undefined | '';\r\n    @Input()\r\n    public container: HTMLElement;\r\n\r\n    @Input()\r\n    public cbContent: string | undefined;\r\n\r\n    @Input()\r\n    public cbSuccessMsg: string;\r\n\r\n    @Output()\r\n    public cbOnSuccess: EventEmitter<IClipboardResponse> = new EventEmitter<IClipboardResponse>();\r\n\r\n    @Output()\r\n    public cbOnError: EventEmitter<any> = new EventEmitter<any>();\r\n    constructor(private clipboardSrv: ClipboardService) {}\r\n\r\n    // tslint:disable-next-line:no-empty\r\n    public ngOnInit() {}\r\n\r\n    public ngOnDestroy() {\r\n        this.clipboardSrv.destroy(this.container);\r\n    }\r\n\r\n    @HostListener('click', ['$event.target'])\r\n    public onClick(event: Event) {\r\n        if (!this.clipboardSrv.isSupported) {\r\n            this.handleResult(false, undefined, event);\r\n        } else if (this.targetElm && this.clipboardSrv.isTargetValid(this.targetElm)) {\r\n            this.handleResult(this.clipboardSrv.copyFromInputElement(this.targetElm), this.targetElm.value, event);\r\n        } else if (this.cbContent) {\r\n            this.handleResult(this.clipboardSrv.copyFromContent(this.cbContent, this.container), this.cbContent, event);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Fires an event based on the copy operation result.\r\n     * @param succeeded\r\n     */\r\n    private handleResult(succeeded: boolean, copiedContent: string | undefined, event: Event) {\r\n        let response: IClipboardResponse = {\r\n            isSuccess: succeeded,\r\n            event\r\n        };\r\n\r\n        if (succeeded) {\r\n            response = Object.assign(response, {\r\n                content: copiedContent,\r\n                successMessage: this.cbSuccessMsg\r\n            });\r\n            this.cbOnSuccess.emit(response);\r\n        } else {\r\n            this.cbOnError.emit(response);\r\n        }\r\n\r\n        this.clipboardSrv.pushCopyResponse(response);\r\n    }\r\n}\r\n","import { Directive, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';\r\n\r\nimport { ClipboardService } from './ngx-clipboard.service';\r\n\r\n@Directive({\r\n    selector: '[ngxClipboardIfSupported]'\r\n})\r\nexport class ClipboardIfSupportedDirective implements OnInit {\r\n    constructor(\r\n        private _clipboardService: ClipboardService,\r\n        private _viewContainerRef: ViewContainerRef,\r\n        private _templateRef: TemplateRef<any>\r\n    ) {}\r\n\r\n    ngOnInit() {\r\n        if (this._clipboardService.isSupported) {\r\n            this._viewContainerRef.createEmbeddedView(this._templateRef);\r\n        }\r\n    }\r\n}\r\n","import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { ClipboardIfSupportedDirective } from './ngx-clipboard-if-supported.directive';\r\nimport { ClipboardDirective } from './ngx-clipboard.directive';\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n    declarations: [ClipboardDirective, ClipboardIfSupportedDirective],\r\n    exports: [ClipboardDirective, ClipboardIfSupportedDirective]\r\n})\r\nexport class ClipboardModule {}\r\n","/*\r\n * Public API Surface of ngx-clipboard\r\n */\r\n\r\nexport * from './lib/ngx-clipboard.service';\r\nexport * from './lib/ngx-clipboard.directive';\r\nexport * from './lib/ngx-clipboard.module';\r\nexport * from './lib/ngx-clipboard-if-supported.directive';\r\nexport * from './lib/interface';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"]}